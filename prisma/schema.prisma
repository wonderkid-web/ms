generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum AccountRole {
  ADMIN
  MANAGER
  STAFF
  VIEWER
}

enum AccountStatus {
  INVITED
  ACTIVE
  SUSPENDED
}

enum SupplierType {
  INTI
  PLASMA
  SWADAYA
  PIHAK_KETIGA
  LAINNYA
}

enum LegalStatus {
  HGU
  SHM
  SKT
  HGB
  LAINNYA
}

enum MapAvailability {
  TERSEDIA
  TIDAK
}

model Account {
  id       Int           @id @default(autoincrement())
  email    String        @unique
  password String
  fullName String
  role     AccountRole   @default(VIEWER)
  status   AccountStatus @default(INVITED)

  clerkId   String?  @unique // diisi saat user login pertama (sinkron Clerk)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status])
  @@index([role])
}

model Supplier {
  id                Int                 @id @default(autoincrement())
  name              String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  products          Product[]
  declarations      Declaration[]
}

model Group {
  id           Int           @id @default(autoincrement())
  name         String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  declarations Declaration[]
}

model ProductGroup {
  id           Int           @id @default(autoincrement())
  name         String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  products     Product[]
  declarations Declaration[]
}

model Factory {
  id           Int           @id @default(autoincrement())
  name         String
  alamat       String
  latitude     Float
  longitude    Float
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  products     Product[]
  declarations Declaration[]
}

model Product {
  id         Int      @id @default(autoincrement())
  name       String
  supplierId Int
  groupId    Int
  factoryId  Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  supplier Supplier     @relation(fields: [supplierId], references: [id])
  group    ProductGroup @relation(fields: [groupId], references: [id])
  factory  Factory      @relation(fields: [factoryId], references: [id])
}

model Employee {
  id        Int      @id @default(autoincrement())
  fullName  String
  email     String   @unique
  whatsapp  String   @db.VarChar(20) // Nomor WA tanpa spasi
  corporate String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Declaration {
  id               Int      @id @default(autoincrement())
  produkId         Int
  groupId          Int
  supplierId       Int?
  factoryId        Int
  alamatPabrik     String
  latitude         Float
  longitude        Float
  kapasitas        String
  sertifikasi      String
  periodeDari      DateTime
  periodeSampai    DateTime
  totalPersenTtp   Float
  tanggalPengisian DateTime
  diisiOleh        String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // relations lama
  produk   ProductGroup @relation(fields: [produkId], references: [id])
  group    Group        @relation(fields: [groupId], references: [id])
  supplier Supplier?    @relation(fields: [supplierId], references: [id])
  factory  Factory      @relation(fields: [factoryId], references: [id])

  // NEW: relasi header -> detail (1..n)
  details DeclarationDetail[]
}

model DeclarationDetail {
  id            Int @id @default(autoincrement())
  declarationId Int

  // kalau mau pakai master Supplier, boleh simpan id-nya juga
  namaSupplier String // teks yang tampil di form

  jenisSupplier SupplierType
  jumlahPetani  Int?
  alamatKebun   String?

  latitude  Float? // LU/LS → desimal (S = minus)
  longitude Float? // BT/BB → desimal (W = minus)

  petaKebun MapAvailability?
  lampiran  Json? // simpan meta file (name, url, size) atau array

  areaHa           Decimal?     @db.Decimal(10, 2)
  statusLegalitas  LegalStatus?
  persentaseSuplai Decimal      @db.Decimal(5, 2) // wajib; total semua baris = 100

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relations
  declaration Declaration @relation(fields: [declarationId], references: [id], onDelete: Cascade)


  @@index([declarationId])
  @@map("declaration_details")
}

/// --- Quisioner module ---
enum QuisionerStatus {
  draft
  published
}

enum QuestionType {
  short_text
  long_text
  multiple_choice
  checkbox
  rating
  number
  date
}

model Quisioner {
  id          Int              @id @default(autoincrement())
  title       String
  description String?          @db.Text
  status      QuisionerStatus  @default(draft)
  startDate   DateTime?
  endDate     DateTime?
  createdBy   String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  questions   Question[]
  responses   Response[]
}

model Question {
  id           Int           @id @default(autoincrement())
  quisionerId  Int
  quisioner    Quisioner     @relation(fields: [quisionerId], references: [id], onDelete: Cascade)
  order        Int           @default(0)
  title        String
  type         QuestionType
  required     Boolean       @default(false)
  options      Option[]
  answers      Answer[]
}

model Option {
  id          Int       @id @default(autoincrement())
  questionId  Int
  question    Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  order       Int       @default(0)
  label       String

  answerOptions AnswerOption[]
}

model Response {
  id           Int         @id @default(autoincrement())
  quisionerId  Int
  quisioner    Quisioner   @relation(fields: [quisionerId], references: [id], onDelete: Cascade)
  respondentId String?
  submittedAt  DateTime    @default(now())
  answers      Answer[]
}

model Answer {
  id          Int        @id @default(autoincrement())
  responseId  Int
  questionId  Int
  response    Response   @relation(fields: [responseId], references: [id], onDelete: Cascade)
  question    Question   @relation(fields: [questionId], references: [id], onDelete: Cascade)
  valueText   String?    @db.Text
  valueNumber Float?
  valueDate   DateTime?
  rating      Int?

  selectedOptions AnswerOption[]
}

model AnswerOption {
  answerId Int
  optionId Int

  answer   Answer @relation(fields: [answerId], references: [id], onDelete: Cascade)
  option   Option @relation(fields: [optionId], references: [id], onDelete: Cascade)

  @@id([answerId, optionId])
}


